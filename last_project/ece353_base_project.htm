<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ece353_base_project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ece353_base_project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed May 07 22:38:30 2014
<BR><P>
<H3>Maximum Stack Usage =         92 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; initBoard &rArr; initUART5 &rArr; cBufInit &rArr; malloc
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[11]">DisableInterrupts</a>
 <LI><a href="#[1f]">EnableInterrupts</a>
 <LI><a href="#[30]">StartCritical</a>
 <LI><a href="#[31]">EndCritical</a>
 <LI><a href="#[32]">WaitForInterrupt</a>
 <LI><a href="#[33]">getHeapBase</a>
 <LI><a href="#[34]">getHeapSize</a>
 <LI><a href="#[35]">getStackBase</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup.o(RESET) referenced 110 times from startup.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">SYSTICKIntHandler</a> from final_systick.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">TIMERAIntHandler</a> from final_systick.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UART0IntHandler</a> from final_uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">UART2IntHandler</a> from final_uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UART5IntHandler</a> from final_uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[2a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Tx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Rx
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Tx
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Rx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[1f]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Tx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Rx
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Tx
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Rx
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[30]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>getHeapBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>getHeapSize</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>getStackBase</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = main &rArr; initBoard &rArr; initUART5 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxPoll
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d]"></a>initializeADC</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, final_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[36]"></a>GetADCval</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, final_adc.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>initPortF</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[16]"></a>initPortE</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[15]"></a>initPortD</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[14]"></a>initPortC</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[13]"></a>initPortB</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[12]"></a>initPortA</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, final_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[f]"></a>initBoard</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, final_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = initBoard &rArr; initUART5 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeTimerA
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSysTick
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeSPI
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART5
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART2
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART0
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortA
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortB
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortC
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortD
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortE
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPortF
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeADC
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>SYSTICKIntHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, final_systick.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>TIMERAIntHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, final_systick.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>initializeSysTick</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, final_systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[1b]"></a>initializeTimerA</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, final_systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initializeTimerA
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[37]"></a>initializeWatchdog</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, final_systick.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>initializeSPI</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, final_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initializeSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[18]"></a>initUART0</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, final_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[19]"></a>initUART2</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, final_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initUART2 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[1a]"></a>initUART5</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, final_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = initUART5 &rArr; cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBoard
</UL>

<P><STRONG><a name="[21]"></a>uart2Rx</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, final_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>

<P><STRONG><a name="[24]"></a>uart2Tx</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, final_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>

<P><STRONG><a name="[26]"></a>uart5Rx</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, final_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetChar
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>

<P><STRONG><a name="[27]"></a>uart5Tx</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, final_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufGetFreeCount
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufAddChar
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableInterrupts
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>

<P><STRONG><a name="[5]"></a>UART0IntHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, final_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UART2IntHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, final_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART5IntHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, final_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>uartRxPoll</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, final_uart.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>uartTxPoll</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, final_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>uartTxCharPoll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, final_uart.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>PLL_Init</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, pll.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>cBufInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, circular_buffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cBufInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART5
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART2
</UL>

<P><STRONG><a name="[25]"></a>cBufAddChar</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, circular_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Tx
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Tx
</UL>

<P><STRONG><a name="[23]"></a>cBufGetChar</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, circular_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Rx
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Rx
</UL>

<P><STRONG><a name="[22]"></a>cBufGetFreeCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, circular_buffer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Tx
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart5Rx
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Tx
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2Rx
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[28]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cBufInit
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
